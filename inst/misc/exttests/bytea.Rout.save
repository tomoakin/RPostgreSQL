
R version 3.0.0 (2013-04-03) -- "Masked Marvel"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## Test of bytea conversion with insert and retrieve to the db.
> ##
> 
> if ((Sys.getenv("POSTGRES_USER") != "") &
+     (Sys.getenv("POSTGRES_HOST") != "") &
+     (Sys.getenv("POSTGRES_DATABASE") != "")) {
+ 
+     ## try to load our module and abort if this fails
+     stopifnot(require(RPostgreSQL))
+ 
+     ## load the PostgresSQL driver
+     drv <- dbDriver("PostgreSQL")
+ 
+     ## connect to the default db
+     con <- dbConnect(drv,
+                      user=Sys.getenv("POSTGRES_USER"),
+                      password=Sys.getenv("POSTGRES_PASSWD"),
+                      host=Sys.getenv("POSTGRES_HOST"),
+                      dbname=Sys.getenv("POSTGRES_DATABASE"),
+                      port=ifelse((p<-Sys.getenv("POSTGRES_PORT"))!="", p, 5432))
+ 
+     if (dbExistsTable(con, "byteatable"))
+         dbRemoveTable(con, "byteatable")
+ 
+     sample.object <- list("one", "two");
+     ser <- serialize(sample.object, NULL, ascii=F);
+ 
+     ## Test the store/recovery of binary data
+     dbGetQuery(con, "CREATE TABLE byteatable (name text, val bytea)")
+     dbGetQuery(con, "set standard_conforming_strings to 'on'")
+     cat("Note the encoded string could differ depending on the server.\n")
+     cat("Show encoded string when standard_conforming_strings is on.\n")
+     print(postgresqlEscapeBytea(con, ser))
+     iq <- sprintf("INSERT INTO byteatable values('%s', '%s');", "name1", postgresqlEscapeBytea(con, ser))
+     dbGetQuery(con, iq)
+     rows<-dbGetQuery(con, "SELECT * from byteatable")
+     ser2<-postgresqlUnescapeBytea(rows[[2]])
+     if (identical(ser, ser2)) {
+         cat("PASS: Identical data was recovered\n")
+     }else{
+         cat("FAIL: The recovered data is not identical\n")
+         ser
+         ser2
+     }
+     dbGetQuery(con, "set standard_conforming_strings to 'off'")
+     dbGetQuery(con, "set escape_string_warning to 'off'")
+     cat("Show encoded string when standard_conforming_strings is off.\n")
+     print(postgresqlEscapeBytea(con, ser))
+     iq <- sprintf("INSERT INTO byteatable values('%s', '%s');", "name2", postgresqlEscapeBytea(con, ser))
+     dbGetQuery(con, iq)
+     rows<-dbGetQuery(con, "SELECT * from byteatable where name = 'name2'")
+     ser3<-postgresqlUnescapeBytea(rows[[2]])
+     if (identical(ser, ser3)) {
+         cat("PASS: Identical data was recovered\n")
+     }else{
+         cat("FAIL: The recovered data is not identical\n")
+         ser
+         ser2
+     }
+     dbRemoveTable(con, "byteatable")
+     dbDisconnect(con)
+     dbUnloadDriver(drv)
+     cat("DONE\n")
+ }else{
+     cat("Skip because envirinmental variables are not set to tell the connection params.\n")
+ }
Loading required package: RPostgreSQL
Loading required package: DBI
Note the encoded string could differ depending on the server.
Show encoded string when standard_conforming_strings is on.
[1] "X\\012\\000\\000\\000\\002\\000\\003\\000\\000\\000\\002\\003\\000\\000\\000\\000\\023\\000\\000\\000\\002\\000\\000\\000\\020\\000\\000\\000\\001\\000\\004\\000\\011\\000\\000\\000\\003one\\000\\000\\000\\020\\000\\000\\000\\001\\000\\004\\000\\011\\000\\000\\000\\003two"
PASS: Identical data was recovered
Show encoded string when standard_conforming_strings is off.
[1] "X\\\\012\\\\000\\\\000\\\\000\\\\002\\\\000\\\\003\\\\000\\\\000\\\\000\\\\002\\\\003\\\\000\\\\000\\\\000\\\\000\\\\023\\\\000\\\\000\\\\000\\\\002\\\\000\\\\000\\\\000\\\\020\\\\000\\\\000\\\\000\\\\001\\\\000\\\\004\\\\000\\\\011\\\\000\\\\000\\\\000\\\\003one\\\\000\\\\000\\\\000\\\\020\\\\000\\\\000\\\\000\\\\001\\\\000\\\\004\\\\000\\\\011\\\\000\\\\000\\\\000\\\\003two"
PASS: Identical data was recovered
DONE
> 
> proc.time()
   user  system elapsed 
  0.420   0.041   0.522 
